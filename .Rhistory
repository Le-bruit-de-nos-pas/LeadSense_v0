library(devtools)
install.packages("devtools")
library(devtools)
use_package("ggplot2")
use_package("jsonlite")
use_package("dplyr")
use_r("summary_long")
file_path <- "../data/Report_Json_Session_Report_20240323T174345.json"
dataset <- fromJSON(file_path)
file_path <- "../data/Report_Json_Session_Report_20240323T174345.json"
dataset <- jsnolite::fromJSON(file_path)
file_path <- "../data/Report_Json_Session_Report_20240323T174345.json"
dataset <- jsonlite::fromJSON(file_path)
dataset <- jsonlite::fromJSON("Report_Json_Session_Report_20240323T174345.json")
save(dataset, file = "data/dataset.rda")
devtools::document()
devtools::install()   # Install the package
list.files("data")
devtools::document()
devtools::install()   # Install the package
data("dataset")
devtools::install()   # Install the package
devtools::install()   # Install the package
use_mit_license()
devtools::load_all(".")
summary_long(data/dataset.rda)
summary_long("./data/dataset.rda")
dataset
summary_long(dataset)
dataset <- jsonlite::fromJSON("Report_Json_Session_Report_20240323T174444.json")
dataset2 <- jsonlite::fromJSON("Report_Json_Session_Report_20240323T174444.json")
save(dataset2, file = "data/dataset2.rda")
summary_long(dataset)
summary_long()
LeadSense::dataset
LeadSense::dataset2
devtools::load_all(".")
library(LeadSense)
LeadSense::dataset2
LeadSense::dataset
LeadSense::summary_long()
devtools::load_all(".")
LeadSense::dataset2
summary_long(dataset)
load(LeadSense::dataset2)
LeadSense::dataset2
dataset = LeadSense::dataset2
summary_long(dataset)
?summary_long()
?summary_long()
?summary_long()
?summary_long()
library(LeadSense)
data("dataset", package = "LeadSense", envir = environment()
data("dataset", package = "LeadSense", envir = environment())
library(LeadSense)
LeadSense::summary_long(dataset)
LeadSense::summary_long()
LeadSense::summary_long()
library(LeadSense)
library(LeadSense)
LeadSense::summary_long()
usethis::use_testthat()
usethis::use_test()
library(LeadSense)
library(LeadSense)
LeadSense::summary_long(dataset = data("dataset2", package = "LeadSense", envir = environment()))
LeadSense::summary_long(dataset = data("dataset", package = "LeadSense", envir = environment()))
LeadSense::summary_long()
dataset2 <-  data("dataset2", package = "LeadSense", envir = environment())
dataset2
LeadSense::summary_long(dataset2)
LeadSense::summary_long(dataset = dataset2)
LeadSense::summary_long(dataset2)
LeadSense::summary_long(dataset)
data("dataset2", package = "LeadSense", envir = environment())
LeadSense::summary_long(dataset2)
devtools::load_all(".")
use_r("impedance_summary")
library(devtools)
use_r("impedance_summary")
devtools::load_all(".")
LeadSense::summary_long()
LeadSense::impedance_summary()
library(LeadSense)
devtools::load_all(".")
LeadSense::impedance_summary()
use_r("lfp_data")
install.packages("ggpubr")
library(LeadSense)
devtools::load_all(".")
LeadSense::lfp_data()
dataset <- fromJSON("Report_Json_Session_Report_example.json")
dataset <- jsonlite::fromJSON("Report_Json_Session_Report_example.json")
use_data(dataset )
use_r("data")
load("C:/Users/paulo/Desktop/LeadSense/data/dataset.rda")
names(dataset)
rm(dataset)
devtools::load_all(".")
data(dataset)
summary_long()
lfp_data()
lfp_data()
devtools::load_all(".")
library(LeadSense)
help(dataset)
?lfp_data
devtools::load_all(".")
library(LeadSense)
?lfp_data
devtools::install()
devtools::check()
remove.packages("LeadSense")
devtools::install(clean = TRUE)  # Reinstall fresh
devtools::install()  # Reinstall fresh
devtools::clean_dll()  # Cleans compiled objects
devtools::document()    # Rebuilds documentation
devtools::build()       # Builds the package
devtools::install()     # Installs the package
devtools::check()
update.packages(ask = FALSE)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all(".")
devtools::document()
devtools::check()
LeadSense::impedance_summary()
LeadSense::summary_long()
LeadSense::lfp_data()
LeadSense::lfp_data()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
git init
git remote add origin https://github.com/Le-bruit-de-nos-pas/LeadSense
devtools::build()
devtools::load_all(".")
summary_long()
library(LeadSense)
LeadSense::summary_long()
LeadSense::summary_long()
library(LeadSense)
LeadSense::lfp_data()
library(LeadSense)
LeadSense::impedance_summary()
LeadSense::lfp_data()
renv::status()
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("ggplot2")
install.packages("ggpubr")
install.packages("tidyr")
library(LeadSense)
LeadSense::summary_long()
LeadSense::lfp_data()
LeadSense::lfp_data()
LeadSense::lfp_data()
library(LeadSense)
LeadSense::lfp_data()
View(structured_lfp_dataset)
system("quarto --version")
library(LeadSense)
library(LeadSense)
devtools::load_all(".")
devtools::load_all(".")
impedance_summary()
lfp_data()
devtools::load_all(".")
library(LeadSense)
LeadSense::dataset
library(LeadSense)
summary_long()
ls("package:LeadSense")
help(package = "LeadSense")
library(devtools)
length(dataset$LfpMontageTimeDomain$TimeDomainData)
dataset$LfpMontageTimeDomain$Channel
dataset$LfpMontageTimeDomain$Channel[[1]]
dataset$LfpMontageTimeDomain$Channel[1]
lfp_data()
library(LeadSense)
lfp_data()
dataset$LfpMontageTimeDomain$TimeDomainData[[1]]
dataset$LfpMontageTimeDomain$SampleRateInHz
library(LeadSense)
lfp_data()
library(LeadSense)
library(LeadSense)
devtools::load_all(".")
lfp_data()
dataset$LfpMontageTimeDomain$Channel
dataset$LfpMontageTimeDomain$SampleRateInHz
length(dataset$LfpMontageTimeDomain$TimeDomainData)
dataset$BrainSenseTimeDomain$Channel
length(dataset$BrainSenseTimeDomain$TimeDomainData[[1]])
length(dataset$BrainSenseTimeDomain$TimeDomainData[[1]])/250
usethis::use_r("brain_sense_spectrogram")
dataset$BrainSenseTimeDomain$TimeDomainData
dataset$BrainSenseTimeDomain$Channel
devtools::document()
devtools::load_all()
brain_sense_spectrogram()
usethis::use_package("seewave")
usethis::use_package("spectro")
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
2
library(LeadSense)
devtools::document()
devtools::load_all(".")
brain_sense_spectrogram()
seq_along(dataset$BrainSenseTimeDomain$TimeDomainData)
devtools::load_all(".")
library(LeadSense)
brain_sense_spectrogram(passes=c(2))
brain_sense_spectrogram(passes=c(10))
brain_sense_spectrogram(passes=c(10))
install.packages("reshape2")
library(LeadSense)
devtools::load_all(".")
devtools::document()
brain_sense_spectrogram(passes = c(3))
brain_sense_spectrogram(passes = c(2))
pass_2 <- brain_sense_spectrogram(passes = c(2))
pass_2
pass_2 <- brain_sense_spectrogram(passes = c(1))
str(pass_2)
library(LeadSense)
pass_2 <- brain_sense_spectrogram(passes = c(2))
pass_2 <- brain_sense_spectrogram(passes = c(1))
library(LeadSense)
pass_2 <- brain_sense_spectrogram(passes = c(2))
rm(pass_2) ; pass_1 <- brain_sense_spectrogram(passes = c(1))
pass_1[1]
length(unique(pass_1[[1]]))
length(unique(pass_1[[1]]$time))
pass_1 <- pass_1[[1]]
ggplot2::ggplot(aes(time, frequency, data=pass_1)) + geom_smooth()
library(ggplot2)
ggplot(pass_1, aes(x = time, y = frequency, fill = magnitude)) +
geom_tile() +
scale_fill_gradientn(colors = viridis::viridis(100), limits = c(-80, 0)) +
labs(
title = paste("ggplot Spectrogram - Channel", unique(pass_1$channel), "(Pass", unique(pass_1$pass), ")"),
x = "Time (s)",
y = "Frequency (Hz)",
fill = "Power (dB)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
library(ggplot2)
ggplot(pass_1, aes(x = time, y = frequency, fill = magnitude)) +
geom_tile() +
labs(
title = paste("ggplot Spectrogram - Channel", unique(pass_1$channel), "(Pass", unique(pass_1$pass), ")"),
x = "Time (s)",
y = "Frequency (Hz)",
fill = "Power (dB)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
rm(pass_1)
passes <- brain_sense_spectrogram()
passes <- brain_sense_spectrogram()
length(passes)
length(passes[[2]])
passes[[2]]
max(passes[[2]]$time)
install.packages("signal")
library(LeadSense)
devtools::load_all(".")
brain_sense_spectrogram(dataset, passes = c(3), band = "Beta")
beta_3 <- brain_sense_spectrogram(dataset, passes = c(3), band = "Beta")
beta_2 <- brain_sense_spectrogram(dataset, passes = c(2), band = "Beta")
rm(beta_3)
devtools::document()
devtools::check()
devtools::check()
devtools::check()
library(LeadSense)
?LeadSense
??LeadSense
help(LeadSense)
?brain_sense_spectrogram
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
library(devtools)
devtools::build()
install.packages("LeadSense")
